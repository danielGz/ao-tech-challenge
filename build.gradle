// Plugin definitions
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.openapi.generator' version '7.7.0'
}

// Group and version settings
group = 'com.agileengine'
version = '0.0.1-SNAPSHOT'

// Java toolchain configuration
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// Dependency configurations
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// Repository configurations
repositories {
	mavenCentral()
}

// Dependency declarations
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// OpenAPI Generator task configuration
openApiGenerate {
	inputSpec.set("$rootDir/src/main/resources/api-spec.yaml")
	outputDir = "${rootDir}"
	println("OpenAPI outputDir : ${rootDir}")
	generatorName = "spring"
	apiPackage = "${group}.ecomm.openapi"
	invokerPackage = "${group}.ecomm.openapi"
	modelPackage = "${group}.ecomm.openapi.model"
	configOptions = [
			library: "spring-boot",
			dateLibrary: "java8",
			hideGenerationTimestamp: "true",
			serializableModel: "true",
			openApiNullable: "false",
			useTags: "true",
			hateoas: "true",
			unhandledException: "true",
			useSpringBoot3: "true",
			useSwaggerUI: "true",
			interfaceOnly: "true",
			skipDefaultInterface: "true"
	]
}

// Tasks for managing API generation and model processing
task generateJpaAnnotations(type: Copy) {
	dependsOn 'openApiGenerate'
	outputs.upToDateWhen { false }
	doFirst {
		println("generating JPA annotations")
	}
	from "$rootDir/src/main/java/com/agileengine/ecomm/openapi/model"
	into "$buildDir/temp/model"
	include '**/*.java'
	eachFile {
		if (!it.file.text.contains("// JPA Annotations Processed")) {
			println("Adding annotations in ${it.file.name}")
			it.file.text = "// JPA Annotations Processed\n" + it.file.text
			if (it.file.text.contains("private Long id")) {
				filter { line ->
					line.contains('package') ? "$line\nimport jakarta.persistence.*;" : line
				}
				filter { line ->
					line.contains('public class') ? "@Entity\n$line" : line
				}
				filter { line ->
					line.contains('private Long id') ? " @Id\n @GeneratedValue(strategy=GenerationType.AUTO)\n$line" : line
				}
			}
		}
	}
	doLast {
		copy {
			from "${buildDir}/temp/model"
			into "$rootDir/src/main/java/com/agileengine/ecomm/openapi/model"
		}
		delete "${buildDir}/temp/model"
		println("JPA annotations generation and copying complete.")
	}
}

task clearAndRegenerate {
	description = 'Clears previous API spec and regenerates JPA annotations'
	doFirst {
		def previousSpec = file("$rootDir/api-spec-prev.yaml")
		if (previousSpec.exists()) {
			previousSpec.delete()
			println("Previous API spec file deleted.")
		} else {
			println("No previous API spec file found.")
		}
	}
	finalizedBy 'generateJpaAnnotations'
}

// Task dependencies and testing configuration
def tasksDependingOnOpenApi = ['jar', 'bootJar', 'resolveMainClassName', 'compileJava', 'processResources']
tasksDependingOnOpenApi.each { taskName ->
	tasks.named(taskName).configure {
		dependsOn 'generateJpaAnnotations'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('openApiGenerate').configure {
	doFirst {
		def currentSpec = file("$rootDir/src/main/resources/api-spec.yaml")
		def previousSpec = file("$rootDir/api-spec-prev.yaml")
		if (!previousSpec.exists() || !currentSpec.text.equals(previousSpec.text)) {
			println("API spec has changed or previous spec missing. Proceeding with generation.")
		} else {
			println("No changes in API spec. Skipping OpenAPI generation.")
			throw new StopExecutionException("Skipping OpenAPI generation as no changes detected.")
		}
	}
	doLast {
		copy {
			from "$rootDir/src/main/resources/api-spec.yaml"
			into "$rootDir"
			rename { "api-spec-prev.yaml" }
		}
		println("OpenAPI generation completed. Spec has been updated.")
	}
}

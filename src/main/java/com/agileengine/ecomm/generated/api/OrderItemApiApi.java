/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.agileengine.ecomm.generated.api;

import com.agileengine.ecomm.generated.model.OrderItem;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "OrderItemApi", description = "the OrderItemApi API")
public interface OrderItemApiApi {

    /**
     * GET /order-items : Get a list of all order items
     *
     * @return A list of order items. (status code 200)
     */
    @Operation(
        operationId = "orderItemsGet",
        summary = "Get a list of all order items",
        tags = { "OrderItemApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of order items.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderItem.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order-items",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<OrderItem>> orderItemsGet(
        
    ) throws Exception;


    /**
     * DELETE /order-items/{id} : Delete an order item by ID
     *
     * @param id  (required)
     * @return Order item deleted. (status code 204)
     */
    @Operation(
        operationId = "orderItemsIdDelete",
        summary = "Delete an order item by ID",
        tags = { "OrderItemApi" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Order item deleted.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/order-items/{id}"
    )
    
    ResponseEntity<Void> orderItemsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception;


    /**
     * GET /order-items/{id} : Get an order item by ID
     *
     * @param id  (required)
     * @return A single order item. (status code 200)
     */
    @Operation(
        operationId = "orderItemsIdGet",
        summary = "Get an order item by ID",
        tags = { "OrderItemApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A single order item.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order-items/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OrderItem> orderItemsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception;


    /**
     * PUT /order-items/{id} : Update an existing order item
     *
     * @param id  (required)
     * @param orderItem  (required)
     * @return Order item updated. (status code 200)
     */
    @Operation(
        operationId = "orderItemsIdPut",
        summary = "Update an existing order item",
        tags = { "OrderItemApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order item updated.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/order-items/{id}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> orderItemsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "OrderItem", description = "", required = true) @Valid @RequestBody OrderItem orderItem
    ) throws Exception;


    /**
     * POST /order-items : Create a new order item
     *
     * @param orderItem  (required)
     * @return Order item created. (status code 201)
     */
    @Operation(
        operationId = "orderItemsPost",
        summary = "Create a new order item",
        tags = { "OrderItemApi" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Order item created.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order-items",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> orderItemsPost(
        @Parameter(name = "OrderItem", description = "", required = true) @Valid @RequestBody OrderItem orderItem
    ) throws Exception;

}
